<templateSet group="React native TS">
  <template name="screen" value="import React, {ReactElement} from &quot;react&quot;;&#10;import {View} from &quot;react-native&quot;;&#10;&#10;/**&#10; * $componentName$. &#10; *&#10; * @constructor&#10; */&#10;const $componentName$ = (): ReactElement =&gt; {&#10;    return (&#10;        &lt;View&gt;&#10;&#10;        &lt;/View&gt;&#10;    );&#10;};&#10;&#10;export default $componentName$;&#10;" description="Create a Screen component" toReformat="false" toShortenFQNames="true">
    <variable name="componentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fc" value="import React, {FC} from &quot;react&quot;;&#10;&#10;/**&#10; * $componentName$ interface.&#10; * &#10; * @property {any} style - Style applied to the root element.&#10; */&#10;interface $PROPS$ {&#10;    style?: any;&#10;}&#10;&#10;/**&#10; * $componentDoc$&#10; *&#10; * @param {$PROPS$} props&#10; * @constructor&#10; */&#10;const $componentName$: FC&lt;$PROPS$&gt; = (props: $PROPS$) =&gt; {&#10;    const {style} = props;&#10;    &#10;    return (&#10;        &#10;    );&#10;};&#10;&#10;export default $componentName$;&#10;" description="Create a functional component" toReformat="false" toShortenFQNames="true">
    <variable name="PROPS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="componentName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="componentDoc" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>